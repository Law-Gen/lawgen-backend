// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: legal_assistant.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LegalAssistant_AskQuestion_FullMethodName = "/legal_assistant.LegalAssistant/AskQuestion"
	LegalAssistant_HealthCheck_FullMethodName = "/legal_assistant.LegalAssistant/HealthCheck"
)

// LegalAssistantClient is the client API for LegalAssistant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Legal Assistant Service Definition
type LegalAssistantClient interface {
	// Stream response for legal questions
	AskQuestion(ctx context.Context, in *QuestionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QuestionResponse], error)
	// Health check
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type legalAssistantClient struct {
	cc grpc.ClientConnInterface
}

func NewLegalAssistantClient(cc grpc.ClientConnInterface) LegalAssistantClient {
	return &legalAssistantClient{cc}
}

func (c *legalAssistantClient) AskQuestion(ctx context.Context, in *QuestionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QuestionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LegalAssistant_ServiceDesc.Streams[0], LegalAssistant_AskQuestion_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QuestionRequest, QuestionResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LegalAssistant_AskQuestionClient = grpc.ServerStreamingClient[QuestionResponse]

func (c *legalAssistantClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, LegalAssistant_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LegalAssistantServer is the server API for LegalAssistant service.
// All implementations must embed UnimplementedLegalAssistantServer
// for forward compatibility.
//
// Legal Assistant Service Definition
type LegalAssistantServer interface {
	// Stream response for legal questions
	AskQuestion(*QuestionRequest, grpc.ServerStreamingServer[QuestionResponse]) error
	// Health check
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedLegalAssistantServer()
}

// UnimplementedLegalAssistantServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLegalAssistantServer struct{}

func (UnimplementedLegalAssistantServer) AskQuestion(*QuestionRequest, grpc.ServerStreamingServer[QuestionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AskQuestion not implemented")
}
func (UnimplementedLegalAssistantServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedLegalAssistantServer) mustEmbedUnimplementedLegalAssistantServer() {}
func (UnimplementedLegalAssistantServer) testEmbeddedByValue()                        {}

// UnsafeLegalAssistantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LegalAssistantServer will
// result in compilation errors.
type UnsafeLegalAssistantServer interface {
	mustEmbedUnimplementedLegalAssistantServer()
}

func RegisterLegalAssistantServer(s grpc.ServiceRegistrar, srv LegalAssistantServer) {
	// If the following call pancis, it indicates UnimplementedLegalAssistantServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LegalAssistant_ServiceDesc, srv)
}

func _LegalAssistant_AskQuestion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuestionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LegalAssistantServer).AskQuestion(m, &grpc.GenericServerStream[QuestionRequest, QuestionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LegalAssistant_AskQuestionServer = grpc.ServerStreamingServer[QuestionResponse]

func _LegalAssistant_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegalAssistantServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegalAssistant_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegalAssistantServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LegalAssistant_ServiceDesc is the grpc.ServiceDesc for LegalAssistant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LegalAssistant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "legal_assistant.LegalAssistant",
	HandlerType: (*LegalAssistantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _LegalAssistant_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AskQuestion",
			Handler:       _LegalAssistant_AskQuestion_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "legal_assistant.proto",
}
