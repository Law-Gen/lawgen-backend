name: Build and Deploy User Service to ACA

on:
  push:
    branches:
      - user-service

# Use environment variables for easy configuration
env:
  ACR_NAME: 'lawgenacr'                 
  MICROSERVICE_NAME: 'user-service'
  RESOURCE_GROUP: 'Zekua'
  CONTAINER_APP_ENV: 'lawgen'        
  TARGET_PORT: '8080'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Log in to Azure CLI (CRITICAL FIX)
      # This step is required to authenticate with your Azure account
      - name: Log in to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 3. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 4. Log in to Azure Container Registry
      # This uses the credentials from the 'azure/login' step above
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}.azurecr.io

      # 5. Build and push Docker image with unique tags
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./user_management
          file: ./user_management/Dockerfile
          push: true
          tags: |
            ${{ env.ACR_NAME }}.azurecr.io/${{ env.MICROSERVICE_NAME }}:latest
            ${{ env.ACR_NAME }}.azurecr.io/${{ env.MICROSERVICE_NAME }}:${{ github.sha }}
          build-args: |
            PORT=${{ env.TARGET_PORT }}
            ENV=${{ secrets.ENV }}

      # 6. Deploy to Azure Container App
      - name: Deploy to Azure Container App
        uses: azure/container-apps-deploy-action@v1
        with:
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          containerAppName: ${{ env.MICROSERVICE_NAME }}
          environment: ${{ env.CONTAINER_APP_ENV }}
          acrName: ${{ env.ACR_NAME }}
          imageToDeploy: ${{ env.ACR_NAME }}.azurecr.io/${{ env.MICROSERVICE_NAME }}:${{ github.sha }}
          targetPort: ${{ env.TARGET_PORT }}
          ingress: 'external'
          # Set non-secret environment variables
          envVars: |
            PORT=${{ env.TARGET_PORT }}
            ENV=${{ secrets.ENV }}
          # Set secret environment variables
          secrets: |
            MONGODB_URI=${{ secrets.MONGODB_URI }}
            MONGODB_DB=${{ secrets.MONGODB_DB }}
            ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}
            REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}
            ACCESS_TOKEN_EXPIRY=${{ secrets.ACCESS_TOKEN_EXPIRY }}
            REFRESH_TOKEN_EXPIRY=${{ secrets.REFRESH_TOKEN_EXPIRY }}
            API_KEY=${{ secrets.API_KEY }}
            API_SECRET=${{ secrets.API_SECRET }}
            CLOUD_NAME=${{ secrets.CLOUD_NAME }}
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            SMTP_USER=${{ secrets.SMTP_USER }}
            SMTP_PASS=${{ secrets.SMTP_PASS }}
            FROM_EMAIL=${{ secrets.FROM_EMAIL }}
            GEMINI_AI_API_KEY=${{ secrets.GEMINI_AI_API_KEY }}
            GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
            GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
            OAUTH_STATE_STRING=${{ secrets.OAUTH_STATE_STRING }}
            APP_URL=${{ secrets.URL }}
